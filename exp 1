import java.io.*;
import java.util.*;

// -------------------- Student Class for Serialization --------------------
class Student implements Serializable {
    private static final long serialVersionUID = 1L;
    int studentID;
    String name;
    String grade;

    Student(int studentID, String name, String grade) {
        this.studentID = studentID;
        this.name = name;
        this.grade = grade;
    }

    @Override
    public String toString() {
        return "StudentID: " + studentID + ", Name: " + name + ", Grade: " + grade;
    }
}

// -------------------- Employee Class for File Handling --------------------
class Employee {
    int id;
    String name;
    String designation;
    double salary;

    Employee(int id, String name, String designation, double salary) {
        this.id = id;
        this.name = name;
        this.designation = designation;
        this.salary = salary;
    }

    @Override
    public String toString() {
        return "ID: " + id + ", Name: " + name + ", Designation: " + designation + ", Salary: " + salary;
    }
}

// -------------------- Main Program --------------------
public class AllInOneApp {
    private static final Scanner sc = new Scanner(System.in);
    private static final String EMPLOYEE_FILE = "employees.txt";
    private static final String STUDENT_FILE = "student.ser";

    public static void main(String[] args) {
        int choice;
        do {
            System.out.println("\n========= MAIN MENU =========");
            System.out.println("1. Sum of Integers (Autoboxing/Unboxing)");
            System.out.println("2. Serialize & Deserialize Student");
            System.out.println("3. Employee Management (File Handling)");
            System.out.println("0. Exit");
            System.out.print("Enter choice: ");

            while (!sc.hasNextInt()) {
                System.out.print("Invalid input. Enter number: ");
                sc.next();
            }
            choice = sc.nextInt();

            switch (choice) {
                case 1: sumOfIntegers(); break;
                case 2: studentSerialization(); break;
                case 3: employeeManagement(); break;
                case 0: System.out.println("Exiting program..."); break;
                default: System.out.println("Invalid choice!");
            }
        } while (choice != 0);
    }

    // ---------- Part (a): Autoboxing / Unboxing ----------
    private static void sumOfIntegers() {
        ArrayList<Integer> numbers = new ArrayList<>();
        sc.nextLine(); // clear buffer
        System.out.println("Enter integers (type 'done' to stop):");

        while (true) {
            String input = sc.nextLine();
            if (input.equalsIgnoreCase("done")) break;
            try {
                int num = Integer.parseInt(input); // String → int
                numbers.add(num); // Autoboxing (int → Integer)
            } catch (NumberFormatException e) {
                System.out.println("Invalid input, enter integers only!");
            }
        }

        int sum = 0;
        for (int n : numbers) { // Unboxing (Integer → int)
            sum += n;
        }
        System.out.println("Sum of integers = " + sum);
    }

    // ---------- Part (b): Serialization / Deserialization ----------
    private static void studentSerialization() {
        try {
            // Create Student object
            System.out.print("Enter Student ID: ");
            int id = sc.nextInt();
            sc.nextLine();
            System.out.print("Enter Student Name: ");
            String name = sc.nextLine();
            System.out.print("Enter Grade: ");
            String grade = sc.nextLine();

            Student s1 = new Student(id, name, grade);

            // Serialize (Save object)
            ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(STUDENT_FILE));
            oos.writeObject(s1);
            oos.close();
            System.out.println("Student object serialized to " + STUDENT_FILE);

            // Deserialize (Read object)
            ObjectInputStream ois = new ObjectInputStream(new FileInputStream(STUDENT_FILE));
            Student deserialized = (Student) ois.readObject();
            ois.close();

            System.out.println("Deserialized Student: " + deserialized);

        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }
    }

    // ---------- Part (c): Employee Management with File Handling ----------
    private static void employeeManagement() {
        int choice;
        do {
            System.out.println("\n--- Employee Management ---");
            System.out.println("1. Add Employee");
            System.out.println("2. Display All Employees");
            System.out.println("0. Back to Main Menu");
            System.out.print("Enter choice: ");

            while (!sc.hasNextInt()) {
                System.out.print("Invalid input. Enter number: ");
                sc.next();
            }
            choice = sc.nextInt();

            switch (choice) {
                case 1: addEmployee(); break;
                case 2: displayEmployees(); break;
                case 0: break;
                default: System.out.println("Invalid choice!");
            }
        } while (choice != 0);
    }

    private static void addEmployee() {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(EMPLOYEE_FILE, true))) {
            System.out.print("Enter Employee ID: ");
            int id = sc.nextInt();
            sc.nextLine();
            System.out.print("Enter Name: ");
            String name = sc.nextLine();
            System.out.print("Enter Designation: ");
            String designation = sc.nextLine();
            System.out.print("Enter Salary: ");
            double salary = sc.nextDouble();

            Employee emp = new Employee(id, name, designation, salary);
            writer.write(emp.toString());
            writer.newLine();
            System.out.println("Employee added successfully.");
        } catch (IOException e) {
            System.out.println("Error writing file: " + e.getMessage());
        }
    }

    private static void displayEmployees() {
        try (BufferedReader reader = new BufferedReader(new FileReader(EMPLOYEE_FILE))) {
            String line;
            System.out.println("\n--- Employee Records ---");
            while ((line = reader.readLine()) != null) {
                System.out.println(line);
            }
        } catch (FileNotFoundException e) {
            System.out.println("No employee records found.");
        } catch (IOException e) {
            System.out.println("Error reading file: " + e.getMessage());
        }
    }
}
